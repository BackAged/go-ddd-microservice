// Code generated by MockGen. DO NOT EDIT.
// Source: product/repo.go

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	product "github.com/BackAged/go-ddd-microservice/product"
	gomock "github.com/golang/mock/gomock"
)

// ProductRepo is a mock of Repo interface
type ProductRepo struct {
	ctrl     *gomock.Controller
	recorder *ProductRepoMockRecorder
}

// ProductRepoMockRecorder is the mock recorder for ProductRepo
type ProductRepoMockRecorder struct {
	mock *ProductRepo
}

// NewProductRepo creates a new mock instance
func NewProductRepo(ctrl *gomock.Controller) *ProductRepo {
	mock := &ProductRepo{ctrl: ctrl}
	mock.recorder = &ProductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *ProductRepo) EXPECT() *ProductRepoMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *ProductRepo) Create(arg0 context.Context, arg1 *product.Product) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *ProductRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*ProductRepo)(nil).Create), arg0, arg1)
}

// GetByProductID mocks base method
func (m *ProductRepo) GetByProductID(arg0 context.Context, arg1 int64) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductID", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductID indicates an expected call of GetByProductID
func (mr *ProductRepoMockRecorder) GetByProductID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductID", reflect.TypeOf((*ProductRepo)(nil).GetByProductID), arg0, arg1)
}

// Update mocks base method
func (m *ProductRepo) Update(arg0 context.Context, arg1 *product.Product) (*product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *ProductRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*ProductRepo)(nil).Update), arg0, arg1)
}

// Delete mocks base method
func (m *ProductRepo) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *ProductRepoMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*ProductRepo)(nil).Delete), arg0, arg1)
}
